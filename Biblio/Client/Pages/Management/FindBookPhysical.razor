@page "/findbooksphysical"
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@attribute [Authorize(Roles = "Librarian")]


<h3>Find book locations</h3>
<br />

<div>
    <p>
        <MatSelectItem @bind-Value="@queryType" Items="@queryTypes"></MatSelectItem> <span style="padding-right:10px;" />
        <MatTextField @bind-Value="@query" Label="Title"></MatTextField> <span style="padding-right:10px;" />
        <MatButton OnClick="@SearchMovie" Raised="true">Search</MatButton>
    </p>
</div>
<hr />

@if (bookCopies.Count <= 0)
{
    if (hasSearched)
    {
        <p>No books found!</p>
    }
    else
    {
        <p>Please search for a book to display a list!</p>
    }
}
else
{
    <GenericBookList DisplayType="@SharedProperties.DisplayTypes.Table" ViewState="@SharedProperties.ViewState.ShowList" BookType="@SharedProperties.BookTypes.Copy" inputObjectList="@bookCopies" IsAdminFindPage="true" />
}

@code {
    private List<BookCopyDTO> bookCopies = new List<BookCopyDTO>();
    private BookCopyDTO bookCopy = new BookCopyDTO();
    private string query = "";
    private bool showDetails = false;
    private string queryType = "Title";
    private bool hasSearched = false;

    private string[] queryTypes = new[]
{
        "Title",
        "Genre",
        "Author"
    };

    private async void SearchMovie()
    {
        // Get books
        bookCopies = await Http.GetFromJsonAsync<List<BookCopyDTO>>($"api/BookCopies/FindBookCopiesByQuery?type={ queryType }&queryText={ query }");
        bookCopies = bookCopies.Where(b => b.IsAvailable == true).ToList();
        hasSearched = true;
        base.StateHasChanged();
    }
}
