@page "/managebooks"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "LibraryAdmin")]

<h3>ManageBooks</h3>
<p>Here you can add new books for the library you are assosiated with. You can also access a page where you can remove any book copy from the library.</p>

<div>
        <MatButton OnClick="@(() => SetState(ViewState.AddExisting))" Raised="true">Add copy</MatButton>
        <MatButton OnClick="@(() => SetState(ViewState.AddNew))" Raised="true">Add new book</MatButton>
        <MatButton OnClick="@(() => SetState(ViewState.Delete))" Raised="true">Delete copy</MatButton>
</div>
<br />
<hr />
<div>
    @switch (viewState)
    {
        case ViewState.Delete:
            <DeleteBookCopy OnBackHandler="@OnBackHandler" DialogShower="@dialogShower" />
            break;
        case ViewState.AddNew:
            <AddNewBook DialogShower="@dialogShower" OnBackHandler="@OnBackHandler" />
            break;
        case ViewState.AddExisting:
            <AddBookCopy DialogShower="@dialogShower" OnBackHandler="@OnBackHandler" />
            break;
        case ViewState.Normal:
            <p>
                Click the relevant button in the top for the action you want to complete.
            </p>
            break;
        default:
            break;
    }


    <DialogShower @ref="@dialogShower" DialogType="@dialogType" />
</div>


@code {
    private string username = "";
    private ApplicationUserDTO appUser = null;
    private string librayName = "";
    private DialogShower dialogShower;
    private DialogShower.DialogTypes dialogType;
    private ViewState viewState = ViewState.Normal;

    private enum ViewState
    {
        Delete,
        AddNew,
        AddExisting,
        Normal
    }

    /// <summary>
    /// Component startup procedure.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Figure the libray out.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        foreach (var claim in authState.User.Claims)
        {
            // Check if claim is the specific library role
            if (claim.Value.ToUpper().Contains("BIBLIOTEK"))
            {
                // Set library name as role name and libray name are the same just with/ without spacing.
                librayName = Regex.Replace(claim.Value, "([a-z])([A-Z])", "$1 $2");
                break;
            }
        }
    }

    private void SetState(ViewState newViewState)
    {
        viewState = newViewState;

        switch (viewState)
        {
            case ViewState.Delete:
                dialogType = DialogShower.DialogTypes.Delete;
                break;
            case ViewState.AddNew:
                dialogType = DialogShower.DialogTypes.Add;
                break;
            case ViewState.AddExisting:
                dialogType = DialogShower.DialogTypes.AddExisting;
                break;
            default:
                break;
        }

        base.StateHasChanged();
    }

    private void OnBackHandler(bool? isSucess)
    {
        viewState = ViewState.Normal;

        base.StateHasChanged();
    }
}
