@page "/managehomelibrary"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Librarian")]

<h3>Manage Home Library</h3>
Here you set your home library to be of this library you are currently at which is: <strong>@library.Name!</strong>
<br />
<br />

<div>
    @switch (currentState)
    {
        case State.ChangedHome:
            <p>
                Congrazt you have changed your home library to *@library.Name*.
            </p>
            break;
        case State.IsCurrentHome:
            <p>
                Yay - This is currently your home library!
            </p>
            break;
        case State.Changing:
            <p>
                <MatTextField @bind-Value="@username" TValue="string" Label="Username" Required="true" OnKeyDown="@OnKeyDownHandler" />
            </p>
            <p>
                <MatButton OnClick="@SearchUser" Raised="true">Search for user</MatButton>
             </p>
            @if (appUser != null)
            {
                <p>Found user with name: @appUser.FullName</p>
            }
            <p>
                <MatButton Disabled="@(appUser == null)" OnClick="@UpdateHomeLibray" Raised="true">Set @library.Name as home library</MatButton>
            </p>
            break;
        default:
            break;
    }
    <DialogShower @ref="@dialogShower" DialogType="DialogShower.DialogTypes.Home" />
</div>


@code {
    private string _username = "";
    private string username = "";
    private ApplicationUserDTO appUser = null;
    private LibraryDTOMinusRelations library = new LibraryDTOMinusRelations();
    private DialogShower dialogShower;
    private State currentState = State.Changing;

    private enum State
    {
        ChangedHome,
        IsCurrentHome,
        Changing
    }

    /// <summary>
    /// Component startup procedure.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Figure the libray out.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string librayName = "";

        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine(claim);
            // Check if claim is the specific library role
            if (claim.Value.ToUpper().Contains("LIBRARY"))
            {
                // Set library name as role name and libray name are the same just with/ without spacing.
                librayName = Regex.Replace(claim.Value, "([a-z])([A-Z])", "$1 $2");
                break;
            }
        }

        library = await Http.GetFromJsonAsync<LibraryDTOMinusRelations>($"api/Libraries/GetLibrayByName?name={ librayName }");
    }

    private async Task OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (e.Key == ConsoleKey.Enter.ToString() && string.IsNullOrEmpty(username))
        {
            await SearchUser();
            base.StateHasChanged();
        }
    }

    private async Task SearchUser()
    {
        if (!string.IsNullOrEmpty(username))
        {
            appUser = await Http.GetFromJsonAsync<ApplicationUserDTO>($"api/AppUser/GetApplicationUserByUsername?username={ username }");

            if (appUser.HomeLibraryId == library.LibraryId)
            {
                currentState = State.IsCurrentHome;
            }

            base.StateHasChanged();
        }
    }

    private async Task UpdateHomeLibray()
    {
        var response = await Http.PutAsync($"api/AppUser/UpdateUserLibrary?username={ username }&libraryId={ library.LibraryId }", null);

        // Show dialog and set component state
        dialogShower.HandleDialog(response.IsSuccessStatusCode);

        if (response.IsSuccessStatusCode)
        {
            currentState = State.ChangedHome;
        }
    }
}
