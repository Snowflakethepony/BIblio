@page "/managehomelibrary"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "LibraryAdmin")]

<h3>Manage Home Library</h3>
Here you set your home library to be of this library you are currently at which is : @library.Name!

<div>
    <p>
        <MatTextField @bind-Value="@username" TValue="string" Label="Username" Required="true" />
    </p>
    <p>
        <MatButton OnClick="@SearchUser" Raised="true">Search for user</MatButton>
    </p>
</div>

<div>
    <p>
        <MatButton Disabled="@(appUser != null)" OnClick="@UpdateHomeLibray" Raised="true">Set @library.Name as home library</MatButton>
    </p>
</div>

@code {
    private string username = "";
    private ApplicationUserDTO appUser = null;
    private LibraryDTOMinusRelations library = new LibraryDTOMinusRelations();

    /// <summary>
    /// Component startup procedure.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Figure the libray out.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string librayName = "";

        foreach (var claim in authState.User.Claims)
        {
            // Check if claim is the specific library role
            if (claim.Value.ToUpper().Contains("LIBRARY"))
            {
                // Set library name as role name and libray name are the same just with/ without spacing.
                librayName = Regex.Replace(claim.Value, "([a-z])([A-Z])", "$1 $2");
                break;
            }
        }

        library = await Http.GetFromJsonAsync<LibraryDTOMinusRelations>($"api/Libraries/GetLibrayByName?name={ librayName }");
    }

    private async Task SearchUser()
    {
        if (!string.IsNullOrEmpty(username))
        {
            appUser = await Http.GetFromJsonAsync<ApplicationUserDTO>($"api/AppUser/GetApplicationUserByUsername?username={ username }");
        }
    }

    private async Task UpdateHomeLibray()
    {
        HttpResponseMessage response;

        response = await Http.PutAsync($"api/AppUser/UpdateUserLibrary?username={ username }&libraryId={ library.LibraryId }", null);
    }
}
