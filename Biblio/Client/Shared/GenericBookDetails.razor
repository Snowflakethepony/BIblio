@using Biblio.Shared.Models.DTOs
@using Biblio.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

@if (isEditingListing)
{
    switch (bookType)
    {
        case SharedProperties.BookTypes.Book:
            <GenericEditListing bookType="@bookType" OnsubmitHandled="@OnEditHandled" username="@username" inputObject="@((BookDTO)inputObject)" />
            break;
        case SharedProperties.BookTypes.Copy:
            <GenericEditListing bookType="@bookType" OnsubmitHandled="@OnEditHandled" username="@username" inputObject="@((BookCopyDTO)inputObject)" />
            break;
        default:
            break;
    }
}
else
{
    <MatButton Icon="@MatIconNames.Backspace" OnClick="@(() => OnbackClick.InvokeAsync(inputObject))" Label="Back"></MatButton>

    <div class="movieDetail">
        @switch (bookType)
        {
            case SharedProperties.BookTypes.Book:
                <Biblio.Client.Shared.Markup.BookDetailsMarkup book="@((BookDTO)inputObject)" />
                break;
            case SharedProperties.BookTypes.Copy:
                <Biblio.Client.Shared.Markup.BookCopyDetailsMarkup bookCopy="@((BookCopyDTO)inputObject)" />
                break;
            default:
                break;
        }
        <hr />
        <div class="movie-actions">
            <AuthorizeView>
                @*TODO: Should make this into a variable that is set doing startup of the component based on input object. *@
                @if (bookType == SharedProperties.BookTypes.Copy)
                {
                    if (isBorrwedByUser)
                    {
                        <MatButton Disabled="@(!CanExtent)" Raised="true" OnClick="@ExtentPeriodHandler">@ExtentBtnText</MatButton>
                    } else
                    {
                        <MatButton Disabled="@reserveButtonBool" Raised="true" OnClick="@ReserveBookHandler">@ReserveBookHandlerBtnText</MatButton>
                    }
                }
            </AuthorizeView>
            <AuthorizeView Roles="SiteAdministrator, LibraryAdmin">
                <MatButton Raised="true" OnClick="@EditListingHandler">Edit listing</MatButton>
            </AuthorizeView>
        </div>

        <br />
        <hr />
        <br />
        <div>
            <DialogShower @ref="@dialogShower" DialogType="@dialogType" />
            <MatDialog @bind-IsOpen="@dialogIsOpen">
                <MatDialogTitle>@title</MatDialogTitle>
                <MatDialogContent>
                    <p>@message</p>

                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@HideDialog">OK</MatButton>
                </MatDialogActions>
            </MatDialog>
        </div>
    </div>
}


@code {
    //[Parameter]
    //public int movieId { get; set; }

    [Parameter]
    public SharedProperties.BookTypes bookType { get; set; }

    [Parameter]
    public EventCallback<object> OnbackClick { get; set; }

    [Parameter]
    public object inputObject { get; set; }

    private string username;
    private bool dialogIsOpen = false;
    private string title;   // Title of the dialog
    private string message; // Message of the dialog
    private bool isEditingListing = false;
    private bool isReservedByUser;
    private bool isBorrwedByUser;
    private BookCopyDTO bookCopy = null;
    private DialogShower dialogShower;
    private DialogShower.DialogTypes dialogType;

    private string ReserveBookHandlerBtnText
    {
        get
        {
            return isReservedByUser ? "Delete Reservation" : "Reserve Book";
        }
    }

    private string ExtentBtnText
    {
        get
        {
            return CanExtent ? "Extent Period" : "Can't extent";
        }
    }

    private bool CanExtent
    {
        get
        {
            if (bookCopy.TimesRerented == 3)
            {
                return false;
            }

            return (bookCopy.ReturnBy - DateTime.Now)?.TotalDays < 2 ? true : false;
        }
    }

    private bool isServedorBorrewed
    {
        get
        {
            // If copy is reserve by user button must be active-
            if (isReservedByUser)
                return false;

            // Set button active based on its availability.
            return bookCopy.IsAvailable ? false : true;
        }
    }

    private bool reserveButtonBool
    {
        get
        {
            // If copy is reserve by user button must be active-
            if (isReservedByUser)
                return false;

            // Set button active based on its availability.
            return bookCopy.IsAvailable ? false : true;
        }
    }

    /// <summary>
    /// Types that define the Dialog type to show a user.
    /// Messages will be based on this type.
    /// </summary>
    private enum DialogTypes
    {
        Reserved,
        Edit
    }

    /// <summary>
    /// Component startup procedure.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Set username.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;

        switch (bookType)
        {
            case SharedProperties.BookTypes.Book:

                break;
            case SharedProperties.BookTypes.Copy:
                bookCopy = (BookCopyDTO)inputObject;

                if (bookCopy.BorrowerId != null)
                {
                    var user = await Http.GetFromJsonAsync<ApplicationUserDTO>($"api/AppUser/GetApplicationUserByUsername?username={ username }");

                    isBorrwedByUser = user.Id == bookCopy.BorrowerId ? true : false;
                }
                else
                {
                    isReservedByUser = await Http.GetFromJsonAsync<bool>($"api/Reservations/IsBookCopyReservedByUser?username={ username }&bookCopyId={ bookCopy.BookCopyId }");
                }

                break;
            default:
                break;
        }
    }

    /// <summary>
    /// Handler for follow movie button.
    /// </summary>
    private async void ReserveBookHandler(MouseEventArgs e)
    {
        HttpResponseMessage response;

        if (isReservedByUser)
        {
            response = await Http.DeleteAsync($"api/Reservations/DeleteReservationForUserByBookCopyId?username={ username }&bookCopyId={ bookCopy.BookCopyId }");
        }
        else
        {
            response = await Http.PostAsJsonAsync<BookCopyDTO>($"api/Reservations/CreateReservationByBookCopyId?username={ username }&bookCopyId={ bookCopy.BookCopyId }", null);
        }

        if (response.IsSuccessStatusCode)
        {
            isReservedByUser = !isReservedByUser;
        }

        HandleDialog(response.IsSuccessStatusCode, DialogTypes.Reserved);
        UpdateUI();
    }

    private async void ExtentPeriodHandler(MouseEventArgs e)
    {
        var response = await Http.PutAsync($"api/BookCopies/ExtentBorrowPeriodById?bookCopyId={ bookCopy.BookCopyId }", null);

        var newPeriod = await response.Content.ReadFromJsonAsync<DateTime>();

        ((BookCopyDTO)inputObject).ReturnBy = newPeriod;

        dialogType = DialogShower.DialogTypes.Extent;
        dialogShower.DialogType = DialogShower.DialogTypes.Extent;
        dialogShower.HandleDialog(response.IsSuccessStatusCode);
    }

    /// <summary>
    /// Handler for the dialog.
    /// </summary>
    /// <param name="isSuccess">State of HTTP response.</param>
    /// <param name="type">Dialog type to open.</param>
    private void HandleDialog(bool isSuccess, DialogTypes type)
    {
        if (isSuccess)
        {
            ShowDialog(type, true);
        }
        else
        {
            ShowDialog(type, false);
        }
    }

    /// <summary>
    /// Show Dialog with messages based on type.
    /// </summary>
    /// <param name="type">Dialog type to open.</param>
    /// <param name="isSuccess">State of HTTP response.</param>
    private void ShowDialog(DialogTypes type, bool isSuccess)
    {
        // Set "generic" title
        title = isSuccess ? type.ToString() + " - Successful" : type.ToString() + " - Failed";

        switch (type)
        {
            case DialogTypes.Reserved:
                message = isSuccess ? "Reservation made succesfully" : "Failed to reserve the book. Please try again later.";
                break;
            case DialogTypes.Edit:
                message = isSuccess ? "Successfully updated listing" : "Failed to update listing. Please try again later.";
                break;
            default:
                break;
        }

        dialogIsOpen = true;
        UpdateUI();
    }

    /// <summary>
    /// Handler to hide the dialog.
    /// </summary>
    private void HideDialog()
    {
        dialogIsOpen = false;
        UpdateUI();
    }

    /// <summary>
    /// Calls StateHasChanged to inform Blazor to rerender.
    /// </summary>
    private void UpdateUI()
    {
        base.StateHasChanged();
    }

    private void OnEditHandled(bool? isSuccess)
    {
        if (null != isSuccess)
        {
            if (isSuccess == true)
            {
                HandleDialog(true, DialogTypes.Edit);
            }
            else
            {
                HandleDialog(false, DialogTypes.Edit);
            }
        }

        // Reset is reviewing to show the list again.
        isEditingListing = false;

        UpdateUI();
    }

    private void EditListingHandler()
    {
        isEditingListing = true;

        UpdateUI();
    }
}
