@using Biblio.Shared.Models.DTOs

@if (bookCopies == null)
{
    <p><em>Book copies not found.</em></p>
}
else
{
    switch (DisplayType)
    {
        case SharedProperties.DisplayTypes.Card:
            <div class="row">
                @foreach (var bookCopy in bookCopies)
                {


                    <div class="col-md-4" style="margin-bottom:20px;">
                        <MatCard class="demo-mat-card">
                            <MatCardContent>
                                <MatCardMedia Wide="true" ImageUrl="@GetImageUrl(bookCopy.Book)" ></MatCardMedia>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin">
                                        @bookCopy.Book.Title
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                                        @if (IsBorrowedBooks)
                                        {
                                            <p>
                                                Return Date: @bookCopy.ReturnBy
                                                Reborrow available: @(bookCopy.TimesRerented <= 3 ? "Yes" : "No")
                                            </p>
                                        } else
                                        {
                                            <p>
                                                Library: @bookCopy.OriginLibrary.Name
                                                Available: @bookCopy.IsAvailable
                                            </p>
                                        }
                                    </MatSubtitle2>
                                </div>

                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                    @bookCopy.Book.Blurb.Substring(0, bookCopy.Book.Blurb.IndexOf('.'))
                                </MatBody2>
                            </MatCardContent>
                            <MatCardActions>
                                <MatButton Icon="@MatIconNames.Description" OnClick="@(() => OnDetailClick.InvokeAsync(bookCopy))" Label="Details"></MatButton>
                            </MatCardActions>
                        </MatCard>
                    </div>
                }
            </div>
            break;
        case SharedProperties.DisplayTypes.List:
            <ul>
                @foreach (var bookCopy in bookCopies)
                {
                    <li>@bookCopy.Book.Title</li>
                }
            </ul>
            break;
        case SharedProperties.DisplayTypes.Table:
            <MatTable Items="bookCopies" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="SelectionChangedEvent">
                <MatTableHeader>
                    <th>Title</th>
                    <th>Author</th>
                    @if (IsAdminFindPage)
                    {
                        <th>Shelf Number</th>
                    }
                    else
                    {
                        <th>Library</th>
                    }
                    <th>Available</th>
                    <th>Blurb</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Book.Title</td>
                    <td>@context.Book.Authors.FirstOrDefault().FullName</td>
                    @if (IsAdminFindPage)
                    {
                        <td>@context.ShelfNumber</td>
                    }
                    else
                    {
                        <td>@context.OriginLibrary.Name</td>
                    }
                    <td>@context.IsAvailable</td>
                    <td>@context.Book.Blurb</td>
                </MatTableRow>
            </MatTable>
            break;
        default:
            <h1>PLEASE SPECIFY DISPLAYTYPE!</h1>
            break;
    }
}

@code {
    [Parameter]
    public List<BookCopyDTO> bookCopies { get; set; }

    [Parameter]
    public SharedProperties.DisplayTypes DisplayType { get; set; }

    [Parameter]
    public EventCallback<object> OnDetailClick { get; set; }

    [Parameter]
    public Action<object> SelectionChangedEvent { get; set; }

    [Parameter]
    public bool IsAdminFindPage { get; set; }

    [Parameter]
    public bool IsBorrowedBooks { get; set; } = false;

    private string GetImageUrl(BookDTO bookDTO)
    {
        if (bookDTO.Image == null || bookDTO.Image.Length == 0)
        {
            return SharedProperties.BaseBookCoverUrl;
        }
        else
        {
            return string.Format("data:image/png;base64,{0}", Convert.ToBase64String(bookDTO.Image));
        }
    }
}