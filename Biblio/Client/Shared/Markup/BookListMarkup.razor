@using Biblio.Shared.Models.DTOs

@if (books == null)
{
    <p><em>Books not found.</em></p>
}
else
{
    switch (DisplayType)
    {
        case SharedProperties.DisplayTypes.Card:
            <div class="row">
                @foreach (var book in books)
                {
                    <div class="col-md-4" style="margin-bottom:20px;">
                        <MatCard class="demo-mat-card">
                            <MatCardContent>
                                <MatCardMedia Wide="true" ImageUrl="@GetImageUrl(book)"></MatCardMedia>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin">
                                        @book.Title
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                                        Published: @book.PublishedDate
                                    </MatSubtitle2>
                                </div>

                                <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                    @string.Format("{0,60}", book.Blurb)
                                </MatBody2>
                            </MatCardContent>
                            <MatCardActions>
                                <MatButton Icon="@MatIconNames.Description" OnClick="@(() => OnDetailClick.InvokeAsync(book))" Label="Details"></MatButton>
                            </MatCardActions>
                        </MatCard>
                    </div>
                }
            </div>
            break;
        case SharedProperties.DisplayTypes.List:
            <ul>
                @foreach (var book in books)
                {
                    <li>@book.Title</li>
                }
            </ul>
            break;
        case SharedProperties.DisplayTypes.Table:
            <MatTable Items="books" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="SelectionChangedEvent">
                <MatTableHeader>
                    <th>Title</th>
                    <th>Author</th>
                    <th>Published</th>
                    <th>Blurb</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Title</td>
                    <td>@context.Authors.FirstOrDefault()</td>
                    <td>@context.PublishedDate</td>
                    <td>@context.Blurb</td>
                </MatTableRow>
            </MatTable>
            break;
        default:
            <h1>PLEASE SPECIFY DISPLAYTYPE!</h1>
            break;
    }
}

@code {
    [Parameter]
    public List<BookDTO> books { get; set; }

    [Parameter]
    public SharedProperties.DisplayTypes DisplayType { get; set; }

    [Parameter]
    public EventCallback<object> OnDetailClick { get; set; }

    [Parameter]
    public Action<object> SelectionChangedEvent { get; set; }

    private string GetImageUrl(BookDTO bookDTO)
    {
        if (bookDTO.Image == null || bookDTO.Image.Length == 0)
        {
            return SharedProperties.BaseBookCoverUrl;
        }
        else
        {
            return string.Format("data:image/png;base64,{0}", Convert.ToBase64String(bookDTO.Image));
        }
    }
}