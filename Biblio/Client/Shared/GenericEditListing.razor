@using Biblio.Shared.Models.DTOs
@using Biblio.Shared.Models
@using Biblio.Client.Shared.Markup
@inject HttpClient Http

@switch (bookType)
{
    case SharedProperties.BookTypes.Book:
        <BookEditMarkup OnsubmitClick="@SubmitChangesHandler" username="@username" book="@((BookDTO)inputObject)"  />
        break;
    case SharedProperties.BookTypes.Copy:
        <BookCopyEditMarkup OnsubmitClick="@SubmitChangesHandler" username="@username" bookCopy="@((BookCopyDTO)inputObject)" />
        break;
}

@code {
    [Parameter]
    public object inputObject { get; set; }

    [Parameter]
    public SharedProperties.BookTypes bookType { get; set; }

    [Parameter]
    public EventCallback<bool?> OnsubmitHandled { get; set; }

    [Parameter]
    public string username { get; set; }

    private async void SubmitChangesHandler(object changedListing)
    {
        if (changedListing == null)
        {
            OnsubmitHandled.InvokeAsync(null);
        }
        else
        {
            HttpResponseMessage response = new HttpResponseMessage();

            switch (bookType)
            {
                case SharedProperties.BookTypes.Book:
                    var book = (BookDTO)changedListing;
                    response = await Http.PutAsJsonAsync<BookDTO>($"api/Books/UpdateBookFromDTO?bookId={ book.BookId }", book);
                    break;
                case SharedProperties.BookTypes.Copy:
                    var bookCopy = (BookCopyDTO)changedListing;
                    response = await Http.PutAsJsonAsync<BookCopyDTO>($"api/BookCopies/UpdateBookCopyFromDTO?bookCopyId={ bookCopy.BookCopyId }", bookCopy);
                    break;
                default:
                    break;
            }

            OnsubmitHandled.InvokeAsync(response.IsSuccessStatusCode);
        }
    }
}
