@using Biblio.Shared.Models.DTOs

@switch (ViewState)
{
    case SharedProperties.ViewState.ShowDetails:
        @switch (BookType)
        {
            case SharedProperties.BookTypes.Book:
                <GenericBookDetails OnbackClick="@OnDetailBackHandler" bookType="@BookType" inputObject="@((BookDTO)detailsObject)" />
                break;
            case SharedProperties.BookTypes.Copy:
                <GenericBookDetails OnbackClick="@OnDetailBackHandler" bookType="@BookType" inputObject="@((BookCopyDTO)detailsObject)" />
                break;
            default:
                break;
        }
        break;
    case SharedProperties.ViewState.ShowList:
        @switch (BookType)
        {
            case SharedProperties.BookTypes.Book:
                <Biblio.Client.Shared.Markup.BookListMarkup DisplayType="@DisplayType" OnDetailClick="@OnDetailClick" SelectionChangedEvent="@SelectionChangedEvent" books="@((List<BookDTO>)InputObjectList)" />
                break;
            case SharedProperties.BookTypes.Copy:
                <Biblio.Client.Shared.Markup.BookCopyListMarkup IsBorrowedBooks="@IsBorrowedBooks" DisplayType="@DisplayType" OnDetailClick="@OnDetailClick" SelectionChangedEvent="@SelectionChangedEvent" bookCopies="@((List<BookCopyDTO>)InputObjectList)" IsAdminFindPage="@IsAdminFindPage" />
                break;
            default:
                break;
        }
        break;
    default:
        break;
}

@code {

    [Parameter]
    public object InputObjectList { get; set; }

    [Parameter]
    public SharedProperties.DisplayTypes DisplayType { get; set; }

    [Parameter]
    public SharedProperties.BookTypes BookType { get; set; }

    [Parameter]
    public EventCallback<object> SideHandler { get; set; }

    [Parameter]
    public SharedProperties.ViewState ViewState { get; set; } = SharedProperties.ViewState.ShowDetails;

    [Parameter]
    public bool IsAdminFindPage { get; set; } = false;

    [Parameter]
    public bool IsBorrowedBooks { get; set; } = false;

    private object detailsObject;

    private void OnDetailClick(object o)
    {
        detailsObject = o;
        ViewState = SharedProperties.ViewState.ShowDetails;
        UIUpdated();
    }

    private void OnDetailBackHandler(object o)
    {
        if (o != null)
        {
            switch (BookType)
            {
                case SharedProperties.BookTypes.Book:
                    var book = ((List<BookDTO>)InputObjectList).First(b => b.BookId == ((BookDTO)o).BookId);
                    book = ((BookDTO)o);
                    break;
                case SharedProperties.BookTypes.Copy:
                    var bookCopy = ((List<BookCopyDTO>)InputObjectList).First(b => b.BookCopyId == ((BookCopyDTO)o).BookCopyId);
                    bookCopy = ((BookCopyDTO)o);
                    break;
                default:
                    break;
            }
        }

        ViewState = SharedProperties.ViewState.ShowList;
        UIUpdated();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            // Do nothing on empty row.
            return;
        }
        else
        {
            OnDetailClick(row);
        }

    }

    private void UIUpdated()
    {
        base.StateHasChanged();
    }
}
