@using Biblio.Shared.Models.DTOs

@switch (ViewState)
{
    case SharedProperties.ViewState.ShowDetails:
        @switch (BookType)
        {
            case SharedProperties.BookTypes.Book:
                <GenericBookDetails OnbackClick="@OnDetailBackHandler" bookType="@BookType" inputObject="@((BookDTO)detailsObject)" />
                break;
            case SharedProperties.BookTypes.Copy:
                <GenericBookDetails OnbackClick="@OnDetailBackHandler" bookType="@BookType" inputObject="@((BookCopyDTO)detailsObject)" />
                break;
            default:
                break;
        }

        break;
    case SharedProperties.ViewState.ShowList:
        @switch (BookType)
        {
            case SharedProperties.BookTypes.Book:
                <Biblio.Client.Shared.Markup.BookListMarkup DisplayType="@DisplayType" OnDetailClick="@OnDetailClick2" SelectionChangedEvent="@SelectionChangedEvent" bookCopies="@((List<BookDTO>)inputObjectList)" />
                break;
            case SharedProperties.BookTypes.Copy:
                <Biblio.Client.Shared.Markup.BookCopyListMarkup DisplayType="@DisplayType" OnDetailClick="@OnDetailClick2" SelectionChangedEvent="@SelectionChangedEvent" bookCopies="@((List<BookCopyDTO>)inputObjectList)" />
                break;
            default:
                break;
        }
        break;
    case SharedProperties.ViewState.Editing:
        break;
    default:
        break;
}

@code {

    [Parameter]
    public object inputObjectList { get; set; }

    [Parameter]
    public SharedProperties.DisplayTypes DisplayType { get; set; }

    [Parameter]
    public SharedProperties.BookTypes BookType { get; set; }

    [Parameter]
    public EventCallback<object> OnDetailClick { get; set; }

    [Parameter]
    public SharedProperties.ViewState ViewState { get; set; } = SharedProperties.ViewState.ShowDetails;

    private object detailsObject;

    private void OnDetailClick2(object o)
    {
        detailsObject = o;
        ViewState = SharedProperties.ViewState.ShowDetails;
        UIUpdated();
    }

    private void OnDetailBackHandler()
    {
        ViewState = SharedProperties.ViewState.ShowList;
        UIUpdated();
    }

    public void SelectionChangedEvent(object row)
    {
        if (row == null)
        {
            // Do nothing on empty row.
            return;
        }
        else
        {
            switch (BookType)
            {
                case SharedProperties.BookTypes.Book:
                    var book = row as BookDTO;
                    OnDetailClick.InvokeAsync(book);
                    break;
                case SharedProperties.BookTypes.Copy:
                    var bookCopy = row as BookCopyDTO;
                    OnDetailClick.InvokeAsync(bookCopy);
                    break;
                default:
                    break;
            }
        }

    }

    private void UIUpdated()
    {
        base.StateHasChanged();
    }
}
